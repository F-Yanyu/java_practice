package org.example.project.UnitTesting;

public class WriteJUnitTesting {
    public static void main(String[] args) {
        /**
         * @单元测试
         *
         * @测试驱动开发
         * 编写接口 => 编写测试 => 编写实现 => 运行测试 => 任务完成
         *                          ||      ||
         *                          || =>N=>||
         *
         * 这就是传说中的TDD
         *
         * @JUnit
         * JUnit是一个开源的Java语言的单元测试框架，专门针对Java设计，使用最广泛。JUnit是事实上的单元测试的标准框架，任何Java开发者都应当学习并使用JUnit编写单元测试。
         * 使用JUnit编写单元测试的好处在于，我们可以非常简单地组织测试代码，并随时运行它们，JUnit就会给出成功的测试和失败的测试，还可以生成测试报告，不仅包含测试的成功率，还可以统计测试的代码覆盖率，即被测试的代码本身有多少经过了测试。对于高质量的代码来说，测试覆盖率应该在80%以上。
         *
         *
         * @单元测试的好处
         * 单元测试可以确保单个方法按照正确预期运行，如果修改了某个方法的代码，只需确保其对应的单元测试通过，即可认为改动正确。此外，测试代码本身就可以作为示例代码，用来演示如何调用该方法。
         * 使用JUnit进行单元测试，我们可以使用断言（Assertion）来测试期望结果，可以方便地组织和运行测试，并方便地查看测试结果。此外，JUnit既可以直接在IDE中运行，也可以方便地集成到Maven这些自动化工具中运行。
         * 在编写单元测试的时候，我们要遵循一定的规范：
         * 一是单元测试代码本身必须非常简单，能一下看明白，决不能再为测试代码编写测试；
         * 二是每个单元测试应当互相独立，不依赖运行的顺序；
         * 三是测试时不但要覆盖常用测试用例，还要特别注意测试边界条件，例如输入为0，null，空字符串""等情况。
         *
         * @小结
         * JUnit是一个单元测试框架，专门用于运行我们编写的单元测试：
         * 一个JUnit测试包含若干@Test方法，并使用Assertions进行断言，注意浮点数assertEquals()要指定delta。
         */



    }
}
